Container(
    child: Column(
      children: <Widget>[
        ExpansionTile(
          title: const Text(
            "Search...",
            style: TextStyle(fontSize: 18.0, fontWeight: FontWeight.bold),
          ),
          children: <Widget>[
            Container(
              child: Column(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: <Widget>[
                    Padding(
                      padding: const EdgeInsets.only(left: 10),
                      child: TextField(
                        decoration: const InputDecoration(
                            border: InputBorder.none, hintText: 'Search'),
                        controller: _searchTodoDataController,
                        keyboardType: TextInputType.multiline,
                        onChanged: (text) {
                          setState(() {
                            _searchTodoData = text;
                          });
                        },
                      ),
                    ),
                    _searchTodoData != ""
                        ? Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        Padding(
                            padding: EdgeInsets.all(20),
                            child: OutlinedButton(
                                style: OutlinedButton.styleFrom(
                                  side: const BorderSide(
                                      width: 2,
                                      color: Color.fromRGBO(
                                          210, 210, 210, 1)),
                                ),
                                onPressed: () {
                                  setState(() {
                                    _searchTodoData = "";
                                  });
                                  _searchTodoDataController.text = "";
                                },
                                child: const Icon(
                                  Icons.clear_rounded,
                                )))
                      ],
                    )
                        : const Divider(
                      height: 0,
                      thickness: 0,
                    )
                  ]),
            ),
          ],
        ),
        ExpansionTile(
          title: const Text(
            "Add new Task...",
            style: TextStyle(fontSize: 18.0, fontWeight: FontWeight.bold),
          ),
          children: <Widget>[
            Column(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: <Widget>[
                Container(
                    padding: const EdgeInsets.all(2),
                    decoration: const BoxDecoration(
                      border: Border(
                          bottom: BorderSide(
                              width: 0.5,
                              color: Color.fromRGBO(0, 0, 0, 0.6))),
                    ),
                    child: Column(
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: <Widget>[
                          Column(
                              mainAxisAlignment: MainAxisAlignment.start,
                              children: <Widget>[
                                Padding(
                                  padding: const EdgeInsets.only(left: 10),
                                  child: TextField(
                                    decoration: const InputDecoration(
                                        border: InputBorder.none,
                                        hintText: 'Task title'),
                                    controller: _todoDataTitleController,
                                    keyboardType: TextInputType.multiline,
                                    maxLines: null,
                                    onChanged: (text) {
                                      setState(() {
                                        _todoDataTitle = text;
                                      });
                                    },
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(left: 10),
                                  child: TextField(
                                    decoration: const InputDecoration(
                                        border: InputBorder.none,
                                        hintText: 'Task description'),
                                    controller:
                                    _todoDataDescriptionController,
                                    keyboardType: TextInputType.multiline,
                                    maxLines: null,
                                    onChanged: (text) {
                                      setState(() {
                                        _todoDataDescription = text;
                                      });
                                    },
                                  ),
                                ),
                              ]),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: <Widget>[
                              Padding(
                                padding: const EdgeInsets.all(16.0),
                                child: Text(
                                  _todoDataDate != null
                                      ? formatterDateTime
                                      .format(_todoDataDate!)
                                      : "",
                                  style: const TextStyle(fontSize: 16),
                                ),
                              ),
                              _todoDataDate != null
                                  ? Padding(
                                padding: const EdgeInsets.all(16.0),
                                child: OutlinedButton(
                                    style: OutlinedButton.styleFrom(
                                      side: const BorderSide(
                                          width: 2,
                                          color: Color.fromRGBO(
                                              210, 210, 210, 1)),
                                    ),
                                    onPressed: () {
                                      setState(() {
                                        _todoDataDate = null;
                                      });
                                    },
                                    child: const Icon(
                                      Icons.clear_rounded,
                                    )),
                              )
                                  : const Divider(
                                height: 0,
                                thickness: 0,
                              )
                            ],
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: <Widget>[
                              Row(
                                children: [
                                  Padding(
                                    padding: const EdgeInsets.all(16.0),
                                    child: OutlinedButton(
                                        style: OutlinedButton.styleFrom(
                                          side: const BorderSide(
                                              width: 2,
                                              color: Color.fromRGBO(
                                                  210, 210, 210, 1)),
                                        ),
                                        onPressed: () {
                                          DatePicker.showDatePicker(context,
                                              showTitleActions: true,
                                              minTime: DateTime(2010, 3, 5),
                                              maxTime: DateTime(2050, 6, 7),
                                              theme: const DatePickerTheme(
                                                  headerColor: Colors.orange,
                                                  backgroundColor:
                                                  Colors.blue,
                                                  itemStyle: TextStyle(
                                                      color: Colors.white,
                                                      fontWeight:
                                                      FontWeight.bold,
                                                      fontSize: 18),
                                                  doneStyle: TextStyle(
                                                      color: Colors.white,
                                                      fontSize: 16)),
                                              onConfirm: (date) {
                                                print('confirm date $date');

                                                final DateTime newDate;
                                                DateTime? currentTodoDate =
                                                    _todoDataDate;
                                                if (currentTodoDate != null) {
                                                  newDate = DateTime(
                                                      date.year,
                                                      date.month,
                                                      date.day,
                                                      currentTodoDate.hour,
                                                      currentTodoDate.minute,
                                                      currentTodoDate.second);
                                                } else {
                                                  newDate = DateTime(
                                                    date.year,
                                                    date.month,
                                                    date.day,
                                                  );
                                                }

                                                print('newDate: $newDate');

                                                setState(() {
                                                  _todoDataDate = newDate;
                                                });
                                              },
                                              currentTime: DateTime.now(),
                                              locale: LocaleType.en);
                                        },
                                        child: const Icon(
                                          Icons.calendar_today,
                                        )),
                                  ),
                                  Padding(
                                    padding: const EdgeInsets.all(16.0),
                                    child: OutlinedButton(
                                        style: OutlinedButton.styleFrom(
                                          side: const BorderSide(
                                              width: 2,
                                              color: Color.fromRGBO(
                                                  210, 210, 210, 1)),
                                        ),
                                        onPressed: () {
                                          DatePicker.showTimePicker(context,
                                              showTitleActions: true,
                                              onConfirm: (date) {
                                                print('confirm time $date');

                                                final DateTime newDate;
                                                DateTime? currentTodoDate =
                                                    _todoDataDate;
                                                if (currentTodoDate != null) {
                                                  newDate = DateTime(
                                                      currentTodoDate.year,
                                                      currentTodoDate.month,
                                                      currentTodoDate.day,
                                                      date.hour,
                                                      date.minute,
                                                      date.second);
                                                } else {
                                                  newDate = DateTime(date.hour,
                                                      date.minute, date.second);
                                                }

                                                print('newDate: $newDate');

                                                setState(() {
                                                  _todoDataDate = newDate;
                                                });
                                              }, currentTime: DateTime.now());
                                        },
                                        child: const Icon(
                                          Icons.watch_later_sharp,
                                        )),
                                  ),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.all(16.0),
                                child: OutlinedButton(
                                    style: OutlinedButton.styleFrom(
                                      side: const BorderSide(
                                          width: 2,
                                          color: Color.fromRGBO(
                                              210, 210, 210, 1)),
                                    ),
                                    onPressed: addTodo,
                                    child: const Icon(
                                      Icons.add,
                                    )),
                              ),
                            ],
                          )
                        ])),

              ],
            )
          ],
        ),
        ExpansionTile(
          title: const Text(
            "Add new Task...",
            style: TextStyle(fontSize: 18.0, fontWeight: FontWeight.bold),
          ),
          children: <Widget>[
            Column(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: <Widget>[
                Container(
                    padding: const EdgeInsets.all(2),
                    decoration: const BoxDecoration(
                      border: Border(
                          bottom: BorderSide(
                              width: 0.5,
                              color: Color.fromRGBO(0, 0, 0, 0.6))),
                    ),
                    child: Column(
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: <Widget>[
                          Column(
                              mainAxisAlignment: MainAxisAlignment.start,
                              children: <Widget>[
                                Padding(
                                  padding: const EdgeInsets.only(left: 10),
                                  child: TextField(
                                    decoration: const InputDecoration(
                                        border: InputBorder.none,
                                        hintText: 'Task title'),
                                    controller: _todoDataTitleController,
                                    keyboardType: TextInputType.multiline,
                                    maxLines: null,
                                    onChanged: (text) {
                                      setState(() {
                                        _todoDataTitle = text;
                                      });
                                    },
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(left: 10),
                                  child: TextField(
                                    decoration: const InputDecoration(
                                        border: InputBorder.none,
                                        hintText: 'Task description'),
                                    controller:
                                    _todoDataDescriptionController,
                                    keyboardType: TextInputType.multiline,
                                    maxLines: null,
                                    onChanged: (text) {
                                      setState(() {
                                        _todoDataDescription = text;
                                      });
                                    },
                                  ),
                                ),
                              ]),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: <Widget>[
                              Padding(
                                padding: const EdgeInsets.all(16.0),
                                child: Text(
                                  _todoDataDate != null
                                      ? formatterDateTime
                                      .format(_todoDataDate!)
                                      : "",
                                  style: const TextStyle(fontSize: 16),
                                ),
                              ),
                              _todoDataDate != null
                                  ? Padding(
                                padding: const EdgeInsets.all(16.0),
                                child: OutlinedButton(
                                    style: OutlinedButton.styleFrom(
                                      side: const BorderSide(
                                          width: 2,
                                          color: Color.fromRGBO(
                                              210, 210, 210, 1)),
                                    ),
                                    onPressed: () {
                                      setState(() {
                                        _todoDataDate = null;
                                      });
                                    },
                                    child: const Icon(
                                      Icons.clear_rounded,
                                    )),
                              )
                                  : const Divider(
                                height: 0,
                                thickness: 0,
                              )
                            ],
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: <Widget>[
                              Row(
                                children: [
                                  Padding(
                                    padding: const EdgeInsets.all(16.0),
                                    child: OutlinedButton(
                                        style: OutlinedButton.styleFrom(
                                          side: const BorderSide(
                                              width: 2,
                                              color: Color.fromRGBO(
                                                  210, 210, 210, 1)),
                                        ),
                                        onPressed: () {
                                          DatePicker.showDatePicker(context,
                                              showTitleActions: true,
                                              minTime: DateTime(2010, 3, 5),
                                              maxTime: DateTime(2050, 6, 7),
                                              theme: const DatePickerTheme(
                                                  headerColor: Colors.orange,
                                                  backgroundColor:
                                                  Colors.blue,
                                                  itemStyle: TextStyle(
                                                      color: Colors.white,
                                                      fontWeight:
                                                      FontWeight.bold,
                                                      fontSize: 18),
                                                  doneStyle: TextStyle(
                                                      color: Colors.white,
                                                      fontSize: 16)),
                                              onConfirm: (date) {
                                                print('confirm date $date');

                                                final DateTime newDate;
                                                DateTime? currentTodoDate =
                                                    _todoDataDate;
                                                if (currentTodoDate != null) {
                                                  newDate = DateTime(
                                                      date.year,
                                                      date.month,
                                                      date.day,
                                                      currentTodoDate.hour,
                                                      currentTodoDate.minute,
                                                      currentTodoDate.second);
                                                } else {
                                                  newDate = DateTime(
                                                    date.year,
                                                    date.month,
                                                    date.day,
                                                  );
                                                }

                                                print('newDate: $newDate');

                                                setState(() {
                                                  _todoDataDate = newDate;
                                                });
                                              },
                                              currentTime: DateTime.now(),
                                              locale: LocaleType.en);
                                        },
                                        child: const Icon(
                                          Icons.calendar_today,
                                        )),
                                  ),
                                  Padding(
                                    padding: const EdgeInsets.all(16.0),
                                    child: OutlinedButton(
                                        style: OutlinedButton.styleFrom(
                                          side: const BorderSide(
                                              width: 2,
                                              color: Color.fromRGBO(
                                                  210, 210, 210, 1)),
                                        ),
                                        onPressed: () {
                                          DatePicker.showTimePicker(context,
                                              showTitleActions: true,
                                              onConfirm: (date) {
                                                print('confirm time $date');

                                                final DateTime newDate;
                                                DateTime? currentTodoDate =
                                                    _todoDataDate;
                                                if (currentTodoDate != null) {
                                                  newDate = DateTime(
                                                      currentTodoDate.year,
                                                      currentTodoDate.month,
                                                      currentTodoDate.day,
                                                      date.hour,
                                                      date.minute,
                                                      date.second);
                                                } else {
                                                  newDate = DateTime(date.hour,
                                                      date.minute, date.second);
                                                }

                                                print('newDate: $newDate');

                                                setState(() {
                                                  _todoDataDate = newDate;
                                                });
                                              }, currentTime: DateTime.now());
                                        },
                                        child: const Icon(
                                          Icons.watch_later_sharp,
                                        )),
                                  ),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.all(16.0),
                                child: OutlinedButton(
                                    style: OutlinedButton.styleFrom(
                                      side: const BorderSide(
                                          width: 2,
                                          color: Color.fromRGBO(
                                              210, 210, 210, 1)),
                                    ),
                                    onPressed: addTodo,
                                    child: const Icon(
                                      Icons.add,
                                    )),
                              ),
                            ],
                          )
                        ])),

              ],
            )
          ],
        ),
        ExpansionTile(
          title: const Text(
            "Add new Task...",
            style: TextStyle(fontSize: 18.0, fontWeight: FontWeight.bold),
          ),
          children: <Widget>[
            Column(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: <Widget>[
                Container(
                    padding: const EdgeInsets.all(2),
                    decoration: const BoxDecoration(
                      border: Border(
                          bottom: BorderSide(
                              width: 0.5,
                              color: Color.fromRGBO(0, 0, 0, 0.6))),
                    ),
                    child: Column(
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: <Widget>[
                          Column(
                              mainAxisAlignment: MainAxisAlignment.start,
                              children: <Widget>[
                                Padding(
                                  padding: const EdgeInsets.only(left: 10),
                                  child: TextField(
                                    decoration: const InputDecoration(
                                        border: InputBorder.none,
                                        hintText: 'Task title'),
                                    controller: _todoDataTitleController,
                                    keyboardType: TextInputType.multiline,
                                    maxLines: null,
                                    onChanged: (text) {
                                      setState(() {
                                        _todoDataTitle = text;
                                      });
                                    },
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(left: 10),
                                  child: TextField(
                                    decoration: const InputDecoration(
                                        border: InputBorder.none,
                                        hintText: 'Task description'),
                                    controller:
                                    _todoDataDescriptionController,
                                    keyboardType: TextInputType.multiline,
                                    maxLines: null,
                                    onChanged: (text) {
                                      setState(() {
                                        _todoDataDescription = text;
                                      });
                                    },
                                  ),
                                ),
                              ]),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: <Widget>[
                              Padding(
                                padding: const EdgeInsets.all(16.0),
                                child: Text(
                                  _todoDataDate != null
                                      ? formatterDateTime
                                      .format(_todoDataDate!)
                                      : "",
                                  style: const TextStyle(fontSize: 16),
                                ),
                              ),
                              _todoDataDate != null
                                  ? Padding(
                                padding: const EdgeInsets.all(16.0),
                                child: OutlinedButton(
                                    style: OutlinedButton.styleFrom(
                                      side: const BorderSide(
                                          width: 2,
                                          color: Color.fromRGBO(
                                              210, 210, 210, 1)),
                                    ),
                                    onPressed: () {
                                      setState(() {
                                        _todoDataDate = null;
                                      });
                                    },
                                    child: const Icon(
                                      Icons.clear_rounded,
                                    )),
                              )
                                  : const Divider(
                                height: 0,
                                thickness: 0,
                              )
                            ],
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: <Widget>[
                              Row(
                                children: [
                                  Padding(
                                    padding: const EdgeInsets.all(16.0),
                                    child: OutlinedButton(
                                        style: OutlinedButton.styleFrom(
                                          side: const BorderSide(
                                              width: 2,
                                              color: Color.fromRGBO(
                                                  210, 210, 210, 1)),
                                        ),
                                        onPressed: () {
                                          DatePicker.showDatePicker(context,
                                              showTitleActions: true,
                                              minTime: DateTime(2010, 3, 5),
                                              maxTime: DateTime(2050, 6, 7),
                                              theme: const DatePickerTheme(
                                                  headerColor: Colors.orange,
                                                  backgroundColor:
                                                  Colors.blue,
                                                  itemStyle: TextStyle(
                                                      color: Colors.white,
                                                      fontWeight:
                                                      FontWeight.bold,
                                                      fontSize: 18),
                                                  doneStyle: TextStyle(
                                                      color: Colors.white,
                                                      fontSize: 16)),
                                              onConfirm: (date) {
                                                print('confirm date $date');

                                                final DateTime newDate;
                                                DateTime? currentTodoDate =
                                                    _todoDataDate;
                                                if (currentTodoDate != null) {
                                                  newDate = DateTime(
                                                      date.year,
                                                      date.month,
                                                      date.day,
                                                      currentTodoDate.hour,
                                                      currentTodoDate.minute,
                                                      currentTodoDate.second);
                                                } else {
                                                  newDate = DateTime(
                                                    date.year,
                                                    date.month,
                                                    date.day,
                                                  );
                                                }

                                                print('newDate: $newDate');

                                                setState(() {
                                                  _todoDataDate = newDate;
                                                });
                                              },
                                              currentTime: DateTime.now(),
                                              locale: LocaleType.en);
                                        },
                                        child: const Icon(
                                          Icons.calendar_today,
                                        )),
                                  ),
                                  Padding(
                                    padding: const EdgeInsets.all(16.0),
                                    child: OutlinedButton(
                                        style: OutlinedButton.styleFrom(
                                          side: const BorderSide(
                                              width: 2,
                                              color: Color.fromRGBO(
                                                  210, 210, 210, 1)),
                                        ),
                                        onPressed: () {
                                          DatePicker.showTimePicker(context,
                                              showTitleActions: true,
                                              onConfirm: (date) {
                                                print('confirm time $date');

                                                final DateTime newDate;
                                                DateTime? currentTodoDate =
                                                    _todoDataDate;
                                                if (currentTodoDate != null) {
                                                  newDate = DateTime(
                                                      currentTodoDate.year,
                                                      currentTodoDate.month,
                                                      currentTodoDate.day,
                                                      date.hour,
                                                      date.minute,
                                                      date.second);
                                                } else {
                                                  newDate = DateTime(date.hour,
                                                      date.minute, date.second);
                                                }

                                                print('newDate: $newDate');

                                                setState(() {
                                                  _todoDataDate = newDate;
                                                });
                                              }, currentTime: DateTime.now());
                                        },
                                        child: const Icon(
                                          Icons.watch_later_sharp,
                                        )),
                                  ),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.all(16.0),
                                child: OutlinedButton(
                                    style: OutlinedButton.styleFrom(
                                      side: const BorderSide(
                                          width: 2,
                                          color: Color.fromRGBO(
                                              210, 210, 210, 1)),
                                    ),
                                    onPressed: addTodo,
                                    child: const Icon(
                                      Icons.add,
                                    )),
                              ),
                            ],
                          )
                        ])),

              ],
            )
          ],
        ),

        GroupedListView<dynamic, String>(
          elements: getTodoListForEachTab(
              _todoList, _currentTabIndex, _searchTodoData),
          itemBuilder: (c, element) {
            return TodoView(
              todoData: element,
              handleRemoveTodo: handleRemoveTodo,
            );
          },

          groupComparator: (value1, value2) =>
              groupComparator(value1, value2, _currentTabIndex),
// value1 == "Overdue" ? 1 : value2.compareTo(value1),
          order: GroupedListOrder.DESC,
          itemComparator: (value1, value2) =>
              itemComparator(value1, value2, _currentTabIndex),
// value2.dateTime.difference(value1.dateTime).inSeconds,

          groupBy: (element) =>
              groupBy(element, formatter, _currentTabIndex),
// groupBy: (element) => "",
          groupSeparatorBuilder: (String value) => Padding(
              padding: const EdgeInsets.all(10.0),
              child: Container(
                padding: const EdgeInsets.only(bottom: 10.0),
                decoration: const BoxDecoration(
                    border: Border(
                        bottom: BorderSide(
                            color: Color.fromRGBO(0, 0, 0, 0.2)))),
                child: Text(
                  value,
                  textAlign: TextAlign.left,
                  style: const TextStyle(
                      fontSize: 20, fontWeight: FontWeight.bold),
                ),
              )),
        )
      ],
    )),
